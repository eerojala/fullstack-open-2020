Viikko 1:

JSX tagit pitää sulkea
	JSX on "XML:n kaltainen", eli jokainen tagi tulee sulkea. Esimerkiksi rivinvaihto on tyhjä elementti, joka voidaan kirjoittaa HTML:ssä seuraavasti
		<br>
		
	mutta JSX:ää kirjoittaessa tagi on pakko sulkea:
		<br />
	
React-komponenttien nimet isolla alkukirjaimella
	-Muuten ei renderöidy oikein
	-On osa JSX tagien nimeämispolitiikkaa
		-sisäänrakennutut komponentit pienellä
		-custom komponentit isolla
		
		https://stackoverflow.com/questions/33259112/why-do-components-in-react-need-to-be-capitalized
	
React-komponentin tulee palauttaa yksi juurielementti
	-Wrappaa siis kaikki <div>-elementin sisälle
	-Mahdollista myös palauttaa taulukollinen komponentteja, mutta näyttää rumalta
	-Jos ei halua että on "ylimääräisiä" div-elementtejä (jotka vain wrappaavat heti toisen div-elementin), voi palauttaa fragmentin (eli tyhjän elementin)
		return (
			<>
			  <h1>Greetings</h1>
			  <Hello name="Maya" age={26 + 10} />
			  <Hello name={name} age={age} />
			  <Footer />
			</> 
		)
		
React-komponentit ja props
	React-komponeteille syötteet annetaan props-oliossa
		const Header = (props) => (
		  <h1>{props.name}</h1>
		)
		
	-eikä siis esim näin
		const Header = (name) => (
		  <h1>{name}</h1>
		)
		
	propsit annetaan sitten näin:
		<Header name={name} />
		
	-Huom propseja ei saa/voi muuttaa komponentin sisällä
		https://stackoverflow.com/questions/51435476/why-props-in-react-are-read-only
		
		
	-Propsit voi destrukturoida suoraan parametreissa näin
		const Header = ({name}) => (
			<h1>{name}</h1>
		)
		
	-Tämä on myös mahdollista:
		const Header = (props) => {
			const { name } = props
		
			return <h1>{name}</h1>
		}
		
Javascriptin muuttujatyypit
	-const = vakio, ei voi vaihtaa ensimmäisen assignin jälkeen
		-huom jos constissa on olio niin sen arvoja voi muuttaa, mutta itse olioita ei voi vaihtaa toiseen olioon
		-Huom myös taulukon sisältöä voi muuttaa (koska se on olio)
		
	-let = muuttuja, voi vaihtaa vapaasti
	-var = muuttuja (ei kannata käyttää, toimii tietyissä tilanteissa eri tavalla kuin useimpien muiden kielien muuttujien määrittely)
		https://medium.com/podiihq/javascript-variables-should-you-use-let-var-or-const-394f7645c88f
		https://www.jstips.co/en/javascript/keyword-var-vs-let/

		-for loopissa määritelty var toimii sen jälkeenkin (var on vissiin kokoajan voimassa funktion sisällä)
			for(var i = 0; i<10; i++) {
			  console.log(i)
			}
			console.log(i) // tulostaa 10
			
			function printing(){
			  for(var i = 0; i<10; i++) {
				console.log(i)
			  }
			}
			printing()
			console.log(i) // undefined
			
			-let pysyy vaan scopen sisällä (eli yläpuolella ei toimisi for-loopin ulkopuolella)
			
		Eli:
			-The scope of a variable defined with var is function scope or declared outside any function, global.
			-The scope of a variable defined with let is block scope.
			
Immutable data structures (muuttumattomat tietorakenteet)
	In object-oriented and functional programming, an immutable object (unchangeable[1] object) is an object whose state cannot be modified after it is created.[2] 
	This is in contrast to a mutable object (changeable object), which can be modified after it is created.

	-Muuttumattomuus on hyödyllinen mm. rinnakkaisuuden kannalta (ovat thread-safe)

	Edellisessä esimerkissä taulukkoon lisättiin uusi alkio metodilla push. Reactin yhteydessä sovelletaan usein funktionaalisen ohjelmoinnin tekniikoita, jonka 
	eräs piirre on käyttää muuttumattomia (engl. immutable) tietorakenteita. React-koodissa kannattaakin mieluummin käyttää metodia concat, joka ei lisää alkiota 
	taulukkoon vaan luo uuden taulukon, jossa on lisättävä alkio sekä vanhan taulukon sisältö:
		const t = [1, -1, 3]

		const t2 = t.concat(5)

		console.log(t)  // tulostuu [1, -1, 3]
		console.log(t2) // tulostuu [1, -1, 3, 5]
		
	-Map muodostaa taulukon perusteella uuden taulukon, jonka jokainen alkio luodaan map:in parametrina olevan funktion avulla, esimerkin tapauksessa kertomalla 
	alkuperäinen luku kahdella.
		const t = [1, 2, 3]

		const m1 = t.map(value => value * 2)
		console.log(m1)   // tulostuu [2, 4, 6]
		
	-Map voi muuttaa taulukon myös täysin erilaiseen muotoon:
		const m2 = t.map(value => '<li>' + value + '</li>')
		console.log(m2)  
		// tulostuu [ '<li>1</li>', '<li>2</li>', '<li>3</li>' ]
		
Oliot
	-Olioiden kenttien nimissä voi olla väli
		-mutta tällöin niihin ei voi viitata pistenotaatiolla, vaan pelkästään hakasulkeilla
			object1.address = 'Tapiola'
			object1['secret number'] = 12341
			
	-Javascriptissäkin olioilla voi olla metodeja, mutta niitä ei tällä kurssilla käytetä
	
	-Olioita on myös mahdollista määritellä ns. konstruktorifunktioiden avulla, jolloin saadaan aikaan hieman monien ohjelmointikielten, esim. Javan luokkia 
	(class) muistuttava mekanismi. Javascriptissä ei kuitenkaan ole luokkia samassa mielessä kuin olio-ohjelmointikielissä. Kieleen on kuitenkin lisätty versiosta 
	ES6 alkaen luokkasyntaksi, joka helpottaa tietyissä tilanteissa olio-ohjelmointikielimäisten luokkien esittämistä.
			
			
Funktioden määrittelytavat
	Nuolisyntaksi:
			const sum = (p1, p2) => {
			  console.log(p1)
			  console.log(p2)
			  return p1 + p2
			}
		
		-Jos parametreja vain yksi, niin sulkuja ei tarvita
			const square = p => {
			  console.log(p)
			  return p * p
			}
			
		-Jos funktio on vain yhden rivin:
			const square = p => p * p (ainoa rivi on palautusarvo)
			
	Avainsana function
		-kaksi tapaa:
			function product(a, b) {
			  return a * b
			}

			const vastaus = product(2, 6)
			
			const average = function(a, b) {
			  return (a + b) / 2
			}

			const vastaus = average(2, 5)
				-Tällöin funktiolle ei tarvitse antaa nimeä ja määrittely voi sijaita muun koodin seassa:
				
	-Kurssilla käytetään pelkästään nuolisyntaksia
	
	
Miten reducetaan olioiden arvot:
  const part1 = {
	name: 'Fundamentals of React',
	exercises: 10
  }

  const part2 = {
	name: 'Using props to pass data',
	exercises: 7
  }

  const part3 = {
	name: 'State of a component',
	exercises: 14
  }

  const parts = [part1, part2, part3]
  const total = Object.values(parts).reduce((accumulator, {exercises}) => accumulator + exercises, 0)

Olioiden funktiot
	const arto = {
	  name: 'Arto Hellas',
	  age: 35,
	  education: 'Filosofian tohtori',
	  greet: function() {
		console.log('hello, my name is', this.name)
	  },
	  doAddition: function(a, b) {    console.log(a + b)  },
	 }

	arto.doAddition(1, 4)        // tulostuu 5

	const referenceToAddition = arto.doAddition
	referenceToAddition(10, 15)  // tulostuu 25
	
	-Jos metodista greet tallennetaan metodiviite, aiheutuu ongelmia
		arto.greet()       // tulostuu hello, my name is Arto Hellas

		const referenceToGreet = arto.greet
		referenceToGreet() // tulostuu ainoastaan hello, my name is
		
		-Alkuperäinen this ei säily
			-Javascriptissa this:n arvo määrittyy sen mukaan miten metodia on kutsuttu. Kutsuttaessa metodia viitteen kautta, this:in arvoksi tulee ns. globaali objekti ja lopputulos ei ole yleensä 
			ollenkaan se, mitä sovelluskehittäjä olettaa.
			
		-Tämä siis kusee:
			setTimeout(arto.greet, 1000) // sekunnin päästä tulostuu hello, my name is
			
			-Javascriptissa this:in arvo siis määräytyy siitä miten metodia on kutsuttu. setTimeoutia käytettäessä metodia kutsuu Javascript-moottori ja this viittaa Timeout-olioon.
			
		-Yksi tapa säilyttää alkuperäinen this on metodin bind käyttö:
			setTimeout(arto.greet.bind(arto), 1000) // sekunnin päästä tulostuu hello, my name is Arto Hellas
			
			-Komento arto.greet.bind(arto) luo uuden funktion, missä se on sitonut this:in tarkoittamaan Artoa riippumatta siitä missä ja miten metodia kutsutaan.
		
			https://egghead.io/courses/understand-javascript-s-this-keyword-in-depth
			
Olioiden luokat:
	Class Person {
	  constructor(name, age) {
		this.name = name
		this.age = age
	  }
	  greet() {
		console.log('hello, my name is', this.name)
	  }
	}

	const arto = new Person('Arto Hellas', 35)
	arto.greet()

	const juhq = new Person('Juha Tauriainen', 48)
	juhq.greet()
	
	-Hyödyllistä tuntea sillä käytetään vanhassa reactissa ja node.js:sä
	
State (tila)
	const App = (props) => {
	  const [ counter, setCounter ] = useState(0)
	  setTimeout(() => setCounter(counter + 1), 1000)
	  return (
		<div>{counter}</div>
	  )
	}
	
	-Metodikutsulla useState(0) komponentille luodaan tila, joka saa alkuarvokseen nollan
		-Metodi palauttaa taulukon jossa on kaksi alkiota, jotka otetaan talteen destrukturointisyntaksilla muuttujiin counter ja setCounter
		
	-counter pitää sisällään tilan arvon (joka on siis aluksi asetettu nollaksi)
	-setCounter on viite funktion, jonka avulla tilaa voidaan muuttaa
	-setTimeOot määrittelee että counter arvoa kasvatetaan yhdellä sekunnin päästä
		-Kun tilan arvo muuttuu, saa se aikaan komponentin uudelleenrenderöinnin
			-jolloin setTimeOut taas asetetaan uudelleen joka taas saa aikaan uudelleenrenderöinnin, synnyttäen syklin
			
	-Kun koodia suoritetaan toista kertaa, funktio useState palauttaa 0 sijasta tilan nykyisen arvon
	
	
	TILAA MUUTTAVAN FUNKTION KUTSUMINEN AIHEUTTAA KOMPONENTIN UUDELLEEN RENDERÖITYMISEN
		-Uudelleenrenderöi myös sisällä viitatut alikomponentits
		
		
	-Usean muuttujan tila:
		const [left, setLeft] = useState(0)
		const [right, setRight] = useState(0)
		
	-Objektin tila:
		const [clicks, setClicks] = useState({
			left: 0, right: 0
		})
		
		Muokataan näin:
			const handleLeftClick = () =>
			  setClicks({ ...clicks, left: clicks.left + 1 })

			const handleRightClick = () =>
			  setClicks({ ...clicks, right: clicks.right + 1 })
			  
		-joskus vaan parempi eriyttää objektit erillisiksi muuttujiksi
			  
	HUOM!!!
		Tilaa EI saa muokata suoraan, täytyy aina asettaa kokonaan uusi arvo (tai olio) (immutable)
			-Taulukkojen tapauksessa käyttää concattia
			
		-Vaikka näyttäisi toimivan voi aiheuttaa hyvin vaikeasti havaittavia ongelmia
		
	-Taulukko tilana:
		const [left, setLeft] = useState(0)
		const [right, setRight] = useState(0)
		const [allClicks, setAll] = useState([]) // taulukko
		

Debuggaus
	-erota tulosttavat objektit pilkulla, ei plussalla kuten javassa
		console.log('props value is', props)
		
	-jos kirjoittaa koodiin debugger niin suoritus etenee siihen asti ja pysähtyy
	
	-ei tarvi kirjoittaa debugger jos laittaa breakpointteja
	
Hookien säännöt
	-EI SAA KUTSUA
		-loopissa
		-ehtolausekkeiden sisällä
		-muualta kuin komponentin määrittelevästä funktiosta itsestään (ei saa siis määritellä funktion sisäisestä funktiosta, kuten esim alla)
			const notGood = () => {
				// ei muiden kuin komponentin määrittelevän funktion sisällä
				const [x, setX] = useState(-1000)
			}
		
	-Tämä takaa sen, että ookeja kutsutaan aina samassa järjestyksessä
		-Jos näin ei ole, sovellus toimii miten sattuu
		
Tapahtumankäsittelijät
	-Tulee aina olla funktio tai viite funktioon
	-Funktiota ei tule kutsua
		-Ellei tämä funktio palauta funktiota tai viitettä funktioon (jota ei kutsuta)
		
	Ei siis näin:
		<button onClick={setValue(0)}>button</button> (funktion kutsu)
		
	vaan näin:
		<button onClick={() => setValue(0)}>button</button> (funktiota ei kutsuta)
		
	Esimerkki funktiosta joka palauttaa funktion:
		const hello = () => {    const handler = () => console.log('hello world')    return handler  }
		
		<button onClick={hello()}>button</button> // tää on ok!!
		
		
		
		
		
	const App = (props) => {
	  const [value, setValue] = useState(44)
	  
	  const setToValue = (newValue) => {
		return () => {
		  setValue(newValue)
		}
	  }

		// tai vaihtoehtoisesti:

	  const setToValue = (newValue) => () => {
		setValue(newValue)
	  }

	  return (
		<div>
		  {value}
		  <button onClick={setToValue(100)}>hundred</button>
		  <button onClick={setToValue(0)}>reset</button>
		  <button onClick={setToValue(value -1)}>decrease by one</button>
		</div>
	  )
	}

ÄLÄ MÄÄRITTELE komponentteja toisten komponenttien sisällä
	-aiheuttaa optimointiongelmia reactille, ja on vähemmän selkeää